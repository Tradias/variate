name: Build

on:
  push:
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.ipp'
      - '**.cmake'
      - '**.cmake.in'
      - '**/CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'sonar-project.properties'
      - 'CMakePresets.json'

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: 'Windows/2022/MSVC',
            os: windows-2022,
            build-type: 'Release',
            parallel: 2,
          }
          - {
            name: 'MacOSX/12/AppleClang',
            os: macos-12,
            build-type: 'Debug',
            parallel: 3,
          }

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake --preset default -DCMAKE_BUILD_TYPE=${{ matrix.config.build-type }}

    - name: Build
      run: cmake --build --preset default --config ${{ matrix.config.build-type }} --parallel ${{ matrix.config.parallel }} -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: Test
      run: ctest --preset default --build-config ${{ matrix.config.build-type }}


  gcc-build:
    name: 'Ubuntu/22.04/GCC'
    runs-on: ubuntu-22.04

    steps:
    - name: Install gcovr
      run: sudo apt-get install gcovr

    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of sonarsource reporting
        fetch-depth: 0

    - name: GCC 10 Configure CMake
      run: |
        cmake --preset default -DCMAKE_CXX_COMPILER=$(which g++-10) \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=on \
        -DVARIATE_TEST_COVERAGE=on \
        -DVARIATE_GCOV_PROGRAM=$(which gcov-10) \
        -DVARIATE_COVERAGE_OUTPUT_FILE=${{ github.workspace }}/build/sonarqube-coverage.xml \
        -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: GCC 10 Build
      run: cmake --build --preset default --parallel $(nproc)

    - name: GCC 10 Test
      run: ctest --preset default

    - name: GCC 10 Install
      run: cmake --install build --prefix build/out

    - name: GCC 10 Coverage
      run: cmake --build ${{ github.workspace }}/build --config Debug --target variate-test-coverage

    - name: Download sonar-scanner
      uses: warchant/setup-sonar-scanner@v3
      with:
        version: 4.8.0.2856

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.cfamily.compile-commands=${{ github.workspace }}/build/compile_commands.json \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.coverageReportPaths=${{ github.workspace }}/build/sonarqube-coverage.xml


  clang-build:
    name: 'Ubuntu/22.04/Clang'
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Clang 12 Configure CMake
      run: |
        cmake --preset default -DCMAKE_CXX_COMPILER=$(which clang++-12) \
        -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=on

    - name: Clang 12 Build
      run: cmake --build --preset default --config Release --parallel $(nproc)

    - name: Clang 12 Test
      run: ctest --preset default --build-config Release
